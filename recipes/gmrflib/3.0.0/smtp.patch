--- gmrflib/smtp-taucs.h.org	2020-07-07 23:33:47.176345471 +0000
+++ gmrflib/smtp-taucs.h	2020-07-07 23:33:57.519348886 +0000
@@ -93,7 +93,6 @@
 int GMRFLib_print_ccs_matrix(FILE *fp, taucs_ccs_matrix * L);
 supernodal_factor_matrix *GMRFLib_sm_fact_duplicate_TAUCS(supernodal_factor_matrix * L);
 taucs_ccs_matrix *my_taucs_dsupernodal_factor_to_ccs(void *vL);
-void taucs_ccs_metis5(taucs_ccs_matrix * m, int **perm, int **invperm, char *which);
 
 /* 
    internal functions here, not documented
--- gmrflib/smtp-taucs.c.org	2020-07-07 23:33:42.364343886 +0000
+++ gmrflib/smtp-taucs.c	2020-07-07 23:35:38.407382182 +0000
@@ -229,124 +229,7 @@
 	return LL;
 }
 
-void taucs_ccs_metis5(taucs_ccs_matrix * m, int **perm, int **invperm, char *which)
-{
-	// this for metis version 5
-
-#if !defined(NO_PARDISO_LIB)
-	int METIS51_NodeND(idx_t *, idx_t *, idx_t *, idx_t *, idx_t *, idx_t *, idx_t *);
-#endif
-
-
-	int n, nnz, i, j, ip;
-	int *xadj;
-	int *adj;
-	int *len;
-	int *ptr;
-	int ret;
-
-	assert(sizeof(idx_t) == sizeof(int));
-
-	if (!(m->flags & TAUCS_SYMMETRIC) && !(m->flags & TAUCS_HERMITIAN)) {
-		taucs_printf("taucs_ccs_treeorder: METIS ordering only works on symmetric matrices.\n");
-		*perm = NULL;
-		*invperm = NULL;
-		return;
-	}
-	/*
-	 * this routine may actually work on UPPER as well 
-	 */
-	if (!(m->flags & TAUCS_LOWER)) {
-		taucs_printf("taucs_ccs_metis: the lower part of the matrix must be represented.\n");
-		*perm = NULL;
-		*invperm = NULL;
-		return;
-	}
-
-	n = m->n;
-	nnz = (m->colptr)[n];
-
-	*perm = Calloc(n, int);
-	*invperm = Calloc(n, int);
-
-	xadj = Calloc(n + 1, int);
-	adj = Calloc(2 * nnz, int);
-
 
-	if (!(*perm) || !(*invperm) || !xadj || !adj) {
-		Free(*perm);
-		Free(*invperm);
-		Free(xadj);
-		Free(adj);
-		*perm = *invperm = NULL;
-		return;
-	}
-
-	ptr = len = *perm;
-	for (i = 0; i < n; i++)
-		len[i] = 0;
-
-	for (j = 0; j < n; j++) {
-		for (ip = (m->colptr)[j]; ip < (m->colptr)[j + 1]; ip++) {
-			/*
-			 * i = (m->rowind)[ip] - (m->indshift);
-			 */
-			i = (m->rowind)[ip];
-			if (i != j) {
-				len[i]++;
-				len[j]++;
-			}
-		}
-	}
-
-	xadj[0] = 0;
-	for (i = 1; i <= n; i++)
-		xadj[i] = xadj[i - 1] + len[i - 1];
-
-	for (i = 0; i < n; i++)
-		ptr[i] = xadj[i];
-
-	for (j = 0; j < n; j++) {
-		for (ip = (m->colptr)[j]; ip < (m->colptr)[j + 1]; ip++) {
-			/*
-			 * i = (m->rowind)[ip] - (m->indshift);
-			 */
-			i = (m->rowind)[ip];
-			if (i != j) {
-				adj[ptr[i]] = j;
-				adj[ptr[j]] = i;
-				ptr[i]++;
-				ptr[j]++;
-			}
-		}
-	}
-	idx_t options[METIS_NOPTIONS];
-	// Have to adapt to the PARDISO metis libs
-	// METIS_SetDefaultOptions(options);
-	for (i = 0; i < METIS_NOPTIONS; i++) {
-		options[i] = -1;
-	}
-
-	options[METIS_OPTION_NUMBERING] = 0;
-	options[METIS_OPTION_NSEPS] = 5;
-	options[METIS_OPTION_COMPRESS] = 0;
-	options[METIS_OPTION_PFACTOR] = 100;
-
-#if defined(NO_PARDISO_LIB)
-	// this the metis5 lib
-	ret = METIS_NodeND(&n, xadj, adj, NULL, options, *perm, *invperm);
-#else
-	// this is defined in the pardiso libs
-	ret = METIS51_NodeND(&n, xadj, adj, NULL, options, *perm, *invperm);
-#endif
-	if (ret != METIS_OK) {
-		assert(0 == 1);
-		return;
-	}
-
-	Free(xadj);
-	Free(adj);
-}
 
 GMRFLib_sizeof_tp GMRFLib_sm_fact_nnz_TAUCS(supernodal_factor_matrix * L)
 {
