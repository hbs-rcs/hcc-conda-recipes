--- QUASR-master/quality_control.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/quality_control.py.new	2018-01-10 16:21:32.605323767 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''This script takes in a FASTQ file, and for each sequence calculates the median quality
 score. If this is lower than a user-specified cutoff, it trims from the 3' end until either
@@ -24,9 +24,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, getopt
-sys.path.append('/Users/sw10/Dropbox/Sanger/QUASR/QUASR_v6.09/modules/')
 try:
-	import qc, qa
+	from quasr import qc, qa
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
@@ -139,4 +138,4 @@
 	
 	if paired is True:
 		graphfile_r = outprefix + '.r.jpg'
-		qa.main(outfile_r, graphfile_r, r_path, ascii_offset, end_length)
\ No newline at end of file
+		qa.main(outfile_r, graphfile_r, r_path, ascii_offset, end_length)
--- QUASR-master/readset_parser.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/readset_parser.py.new	2018-01-10 16:22:18.980704426 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''This script will perform the following processing steps on the data:
 1) Convert SFF to FASTQ
@@ -25,9 +25,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, getopt
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
 try:
-	import sff_to_fastq, qa, split_mids_by_header, split_mids_by_sequence, fastq_primer_remover
+	from quasr import sff_to_fastq, qa, split_mids_by_header, split_mids_by_sequence, fastq_primer_remover
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
@@ -257,4 +256,4 @@
 			graphfile = outprefix + '.trim.jpg'
 		else:
 			graphfile = outprefix + '.jpg'
-		qa.main(infile, graphfile, r_path, ascii_offset, end_length)
\ No newline at end of file
+		qa.main(infile, graphfile, r_path, ascii_offset, end_length)
--- QUASR-master/extras/convert_sam_to_pileup.sh	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/convert_sam_to_pileup.sh.new	2018-01-10 16:30:50.854905976 -0600
@@ -20,7 +20,7 @@
 # You should have received a copy of the GNU General Public License
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
-samtools_path='/nfs/users/nfs_s/sw10/QUASR_v6.07/samtools-0.1.8'
+samtools_path='/opt/anaconda1anaconda2anaconda3/bin/'
 
 if [ "$#" = "0" ]; then
 	echo "[USAGE]: convert_sam_to_pileup.sh <options>
@@ -94,4 +94,4 @@
 	$samtools_path/samtools pileup -c $sorted_bam_filename > $pileup_filename
 else
 	$samtools_path/samtools pileup -c -f $ref_seq_fasta $sorted_bam_filename > $pileup_filename
-fi
\ No newline at end of file
+fi
--- QUASR-master/extras/fastq_duplicate_remover.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/fastq_duplicate_remover.py.new	2018-01-10 16:30:08.253556297 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''Takes in a FASTQ file and stores each record in a dictionary with the sequence 
 as the key to output only unique sequences
@@ -22,9 +22,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, os.path
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
 try:
-	from fastq import *
+	from quasr.fastq import *
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
--- QUASR-master/extras/fastq_remove_Ns.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/fastq_remove_Ns.py.new	2018-01-10 16:29:29.341236897 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''Script written for removing N's from a FASTQ file. Will get the location of N's in a sequence. If multiple, discards read. If 1, trims from closest end.
 '''
@@ -21,9 +21,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
 try:
-	import fastq
+	from quasr import fastq
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
@@ -77,4 +76,4 @@
 	print('[TOTAL]: Input sequences: %d' % total_seqs)
 	print('[PASS]: Sequences written to "%s": %d' % (outfile, passed_seqs))
 	print('[FAIL]: Sequences with >1 N: %d' % failed_seqs)
-	print('[FAIL]: Unparseable sequences: %d' % unparseable_seqs)
\ No newline at end of file
+	print('[FAIL]: Unparseable sequences: %d' % unparseable_seqs)
--- QUASR-master/extras/pileup_consensus.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/pileup_consensus.py.new	2018-01-10 16:28:52.636935625 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''Generates a consensus sequene from a pileup file. Works in 1 of 2 ways depending on command-line
 flags used:
@@ -25,9 +25,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, getopt
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
 try:
-	from pileup import *
+	from quasr.pileup import *
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
--- QUASR-master/extras/pileup_depth_graph.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/pileup_depth_graph.py.new	2018-01-10 16:28:13.168611658 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''Uses R to create a depth plot from a pileup file'''
 
@@ -20,9 +20,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, os, tempfile, getopt, math
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
 try:
-	from pileup import *
+	from quasr.pileup import *
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
--- QUASR-master/extras/pileup_minority_graph.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/pileup_minority_graph.py.new	2018-01-10 16:27:36.357309509 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''This script takes in a pileup file and uses R to print out a stacked histogram of the
 minority bases. The minority bases are those that are not the most frequent base.
@@ -22,9 +22,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, os, math, tempfile, getopt
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
 try:
-	from pileup import *
+	from quasr.pileup import *
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
@@ -293,4 +292,4 @@
 else:
 	print('[INFO]: Depth plots written to:')
 	for i in range(num_pages):
-		print('[INFO]: %s.minority%.2d.jpg' % (outprefix, (i+1)))
\ No newline at end of file
+		print('[INFO]: %s.minority%.2d.jpg' % (outprefix, (i+1)))
--- QUASR-master/extras/pileup_minority_list.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/pileup_minority_list.py.new	2018-01-10 16:26:52.828952221 -0600
@@ -1,4 +1,4 @@
-#! /usr/local/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''This script takes in a pileup file and writes to file all minority bases above 
 a certain frequency for all positions. The minority bases are those that are not 
@@ -23,9 +23,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, getopt
-sys.path.append('/Users/sw10/Dropbox/Sanger/QUASR/QUASR_v6.09/modules/')
 try:
-	from pileup import *
+	from quasr.pileup import *
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
@@ -149,4 +148,4 @@
 				continue
 			elif freqs[base] > f_cutoff and total > depth_cutoff:
 				outfh.write('%s\t%d\t%s\t%.2f\t%d\t%s\n' % (segs[n], counter, base, freqs[base], total, max_base))
-print('[INFO]: Minority frequencies written to "%s"' % outfile)
\ No newline at end of file
+print('[INFO]: Minority frequencies written to "%s"' % outfile)
--- QUASR-master/extras/pileup_minority_numbers.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/extras/pileup_minority_numbers.py.new	2018-01-10 16:26:13.780631708 -0600
@@ -1,4 +1,4 @@
-#! /software/bin/python3
+#!/opt/anaconda1anaconda2anaconda3/bin/python
 
 '''This script takes in a pileup file and writes to file all minority bases above 
 a certain frequency for all positions. The minority bases are those that are not 
@@ -23,9 +23,8 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys, getopt
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR_v6.08/modules/')
 try:
-	from pileup import *
+	from quasr.pileup import *
 except ImportError:
 	print("[ERROR]: Path to QUASR modules not set in script. See 'docs/INSTALL' for more info")
 	sys.exit(1)
--- QUASR-master/modules/fastq_primer_remover.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/fastq_primer_remover.py.new	2018-01-10 17:20:40.908477345 -0600
@@ -18,7 +18,7 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import re
-from fastq import *
+from quasr.fastq import *
 
 def parse_primerfile_to_regex(primerfh):
 	ambiguity_codes = {
--- QUASR-master/modules/fastq.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/fastq.py.new	2018-01-10 17:21:14.638754616 -0600
@@ -15,7 +15,7 @@
 # You should have received a copy of the GNU General Public License
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
-from fasta import *
+from quasr.fasta import *
 
 class FastqRecord(FastaRecord):
 	
--- QUASR-master/modules/pileup.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/pileup.py.new	2018-01-10 17:21:45.833011045 -0600
@@ -20,8 +20,7 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import sys 
-sys.path.append('/nfs/users/nfs_s/sw10/QUASR6/modules/')
-from fasta import *
+from quasr.fasta import *
 
 class PileupFile:
 	
--- QUASR-master/modules/qa.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/qa.py.new	2018-01-10 17:22:30.285376458 -0600
@@ -17,7 +17,7 @@
 
 import tempfile
 import os
-from fastq import *
+from quasr.fastq import *
 
 def determine_R_path():
 	if 'R_PATH' in os.environ:
@@ -131,4 +131,4 @@
 		except OSError as err:
 			print('[ERROR]: Unable to complete clean up: %s' % err)
 	else:
-		print('[ERROR]: Execution of "%s" failed' % r_binary_path)
\ No newline at end of file
+		print('[ERROR]: Execution of "%s" failed' % r_binary_path)
--- QUASR-master/modules/qc.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/qc.py.new	2018-01-10 17:22:52.324557624 -0600
@@ -15,7 +15,7 @@
 # You should have received a copy of the GNU General Public License
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
-from fastq import *
+from quasr.fastq import *
 
 def main(forward_file, outfile_f, reverse_file=None, outfile_r=None, paired=False, ascii_offset=33, median_cutoff=20, length_cutoff=30):
 	with open(forward_file, 'r') as infh_f, open(outfile_f, 'w') as outfh_f:
@@ -161,4 +161,4 @@
 			print('[TOTAL]: Reads passed: %d (%.2f%%)' % (total_passed, (total_passed/total_reads)*100))
 			print('[STATS]: Reads passed without trimming: %d (%.2f%%)' % (for_passed, (for_passed/total_reads)*100))
 			print('[STATS]: Reads passed after trimming: %d (%.2f%%)' % (for_recovered, (for_recovered/total_reads)*100))
-			print('[TOTAL]: Reads failed: %d (%.2f%%)' % (for_failed, (for_failed/total_reads)*100))
\ No newline at end of file
+			print('[TOTAL]: Reads failed: %d (%.2f%%)' % (for_failed, (for_failed/total_reads)*100))
--- QUASR-master/modules/sff_to_fastq.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/sff_to_fastq.py.new	2018-01-10 17:23:15.206745767 -0600
@@ -34,7 +34,7 @@
 #along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 import struct
-import fastq as fastq_module
+import quasr.fastq as fastq_module
 
 def read_bin_fragment(struct_def, fileh, offset=0, data=None, byte_padding=None):
 	if data is None:
@@ -198,4 +198,4 @@
 			
 	print('[INFO]: %d total sequences in SFF file' % total_seqs )
 	print('[INFO]: %d had key sequence "%s" removed' % (num_with_key, key_seq) )
-	print('[INFO]: Sequences written to "%s"' % outfile)
\ No newline at end of file
+	print('[INFO]: Sequences written to "%s"' % outfile)
--- QUASR-master/modules/split_mids_by_header.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/split_mids_by_header.py.new	2018-01-10 17:23:47.518011531 -0600
@@ -20,7 +20,7 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import re, os
-from fastq import *
+from quasr.fastq import *
 
 def main(infile, outprefix, mid_list):
 	outhandles = {}
@@ -51,4 +51,4 @@
 		print('[INFO]: Sequences with MID %d: %d' % (k, out_nums[k]))
 		v.close()
 		if out_nums[k] == 0:
-			os.unlink('%s.%d.fq' % (outprefix, k))
\ No newline at end of file
+			os.unlink('%s.%d.fq' % (outprefix, k))
--- QUASR-master/modules/split_mids_by_sequence.py	2015-12-09 10:42:23.000000000 -0600
+++ QUASR-master/modules/split_mids_by_sequence.py.new	2018-01-10 17:24:09.269190441 -0600
@@ -23,7 +23,7 @@
 # along with QUASR.  If not, see <http://www.gnu.org/licenses/>.
 
 import os
-from fastq import *
+from quasr.fastq import *
 
 def custom_tags_to_dict(infh):
 	custom_dict = {}
@@ -97,4 +97,4 @@
 		print('[INFO]: Sequences with MID %d: %d' % (k, out_nums[k]))
 		v.close()
 		if out_nums[k] == 0:
-			os.unlink('%s.%d.fq' % (outprefix, k))
\ No newline at end of file
+			os.unlink('%s.%d.fq' % (outprefix, k))
